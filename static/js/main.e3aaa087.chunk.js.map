{"version":3,"sources":["Header.js","MemeGen.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","width","MemeGen","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","submit","fetch","then","respose","json","memes","data","console","log","setState","event","target","name","value","this","evt","preventDefault","random","Math","floor","length","ranImg","url","type","placeholder","onChange","onClick","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wNAgBeA,MAbf,WACI,OACI,6BACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,UAAUC,IAAI,mDAAmDC,IAAI,WAAWC,MAAM,QACrG,yBAAKH,UAAU,UAAUC,IAAI,uCAAuCC,IAAI,YAAYC,MAAM,QAC1F,wBAAIH,UAAU,QAAd,qB,0CCmDDI,E,kDAzDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,mCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBATJ,E,gEAYO,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAC,GAAY,IACNE,EAAUF,EAAQG,KAAlBD,MACRE,QAAQC,IAAIH,EAAM,IAClB,EAAKI,SAAS,CAAEZ,YAAaQ,S,mCAI5BK,GAAQ,IAAD,EACQA,EAAMC,OAAtBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACdC,KAAKL,SAAL,eAAgBG,EAAOC,M,6BAGpBE,GACHA,EAAIC,iBACJ,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,KAAKrB,MAAMI,YAAYuB,QAC7DC,EAASP,KAAKrB,MAAMI,YAAYoB,GAAQK,IAC5CR,KAAKL,SAAS,CAAEb,UAAWyB,M,+BAI3B,OACI,6BACI,0BAAMjC,UAAU,QACZ,2BAAOmC,KAAK,OAAOX,KAAK,UAAUY,YAAY,WAAWX,MAAOC,KAAKrB,MAAMC,QAAS+B,SAAUX,KAAKhB,eACnG,2BAAOyB,KAAK,OAAOX,KAAK,aAAaY,YAAY,cAAcX,MAAOC,KAAKrB,MAAME,WAAY8B,SAAUX,KAAKhB,gBAEhH,4BAAQV,UAAU,SAASsC,QAASZ,KAAKd,QAAzC,YACA,6BACA,yBAAKZ,UAAU,QACX,yBAAKC,IAAKyB,KAAKrB,MAAMG,UAAWN,IAAI,QACpC,wBAAIF,UAAU,OAAO0B,KAAKrB,MAAMC,SAChC,wBAAIN,UAAU,UAAU0B,KAAKrB,MAAME,aAEvC,6BACA,6BACA,kC,GAnDMgC,aCQPC,MARf,WACI,OACI,4BAAQxC,UAAU,UACd,4DCaGyC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.e3aaa087.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <header className=\"header\">\r\n                <img className=\"headimg\" src=\"http://www.memes.at/faces/fuck_that_yao_ming.jpg\" alt=\"MemeFace\" width=\"17%\" />\r\n                <img className=\"headimg\" src=\"http://www.memes.at/faces/y_u_no.jpg\" alt=\"MemeFace2\" width=\"17%\" />\r\n                <h1 className=\"head\">Meme Generator</h1>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import React, {Component} from 'react'\r\n\r\nclass MemeGen extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"https://i.imgflip.com/32r2v1.jpg\",\r\n            allMemeImgs: [],\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(respose => respose.json())\r\n            .then(respose => {\r\n                const { memes } = respose.data;\r\n                console.log(memes[0]);\r\n                this.setState({ allMemeImgs: memes });\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target;\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n    submit(evt) {\r\n        evt.preventDefault();\r\n        const random = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n        let ranImg = this.state.allMemeImgs[random].url;\r\n        this.setState({ randomImg: ranImg });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form\">\r\n                    <input type=\"text\" name=\"topText\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange}></input>\r\n                    <input type=\"text\" name=\"bottomText\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange}></input>\r\n                </form>\r\n                <button className=\"button\" onClick={this.submit}>Generate</button>\r\n                <br />\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"???\" />\r\n                    <h3 className=\"top\">{this.state.topText}</h3>\r\n                    <h3 className=\"bottom\">{this.state.bottomText}</h3>\r\n                </div>\r\n                <br />\r\n                <br />\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MemeGen;","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>-- Created by Quang Tran --</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport MemeGen from './MemeGen';\nimport Footer from './Footer';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGen />\n      <Footer/>\n    </div>\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}